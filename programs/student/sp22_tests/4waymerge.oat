global arr = new int[]{1, 4, 7, 10, 13, 100, 21, 34, 1231, 12, 3, 424, 1, 1234, 23, 6234, 524, 523, 6345, 63};


bool is_sorted(int[] arr) {
    for (var i = 0; i < length(arr) - 1; i = i + 1;) {
        if (arr[i] > arr[i + 1]) {
            return false;
        }
    }
    return true;
}

bool should_merge_first(int[] arr1, int idx1, int[] arr2, int idx2) {
    if (idx1 >= length(arr1)) {
        return false;
    } else if (idx2 >= length(arr2)) {
        return true;
    } else {
        return arr1[idx1] <= arr2[idx2];
    }
}

void four_way_merge(int[] arr1, int[] arr2, int[] arr3, int[] arr4, int[] dest) {
    var idx1 = 0;
    var idx2 = 0;
    var idx3 = 0;
    var idx4 = 0;

    for (var i = 0; i < length(dest); i = i + 1;) {
        if (should_merge_first(arr1, idx1, arr2, idx2)
          & should_merge_first(arr1, idx1, arr3, idx3)
          & should_merge_first(arr1, idx1, arr4, idx4)) {
            dest[i] = arr1[idx1];
            idx1 = idx1 + 1;
        } else if (should_merge_first(arr2, idx2, arr1, idx1)
          & should_merge_first(arr2, idx2, arr3, idx3)
          & should_merge_first(arr2, idx2, arr4, idx4)) {
            dest[i] = arr2[idx2];
            idx2 = idx2 + 1;
        } else if (should_merge_first(arr3, idx3, arr1, idx1)
          & should_merge_first(arr3, idx3, arr2, idx2)
          & should_merge_first(arr3, idx3, arr4, idx4)) {
            dest[i] = arr3[idx3];
            idx3 = idx3 + 1;
        } else {
            dest[i] = arr4[idx4];
            idx4 = idx4 + 1;
        }
    }

    return;
}

void swap(int[] a, int i, int j) {
    var temp = a[i];
    a[i] = a[j];
    a[j] = temp;
    return;
}

void merge_sort(int[] arr_to_sort) {
    /* base cases */
    if (length(arr_to_sort) == 0) {
        return;
    } else if (length(arr_to_sort) == 1) {
        return;
    } else if (length(arr_to_sort) == 2) {
        if (arr_to_sort[0] > arr_to_sort[1]) {
            swap(arr_to_sort, 0, 1);
        }

        return;
    } else if (length(arr_to_sort) == 3) {
        /* bubble sort */
        if (arr_to_sort[0] > arr_to_sort[1]) {
            swap(arr_to_sort, 0, 1);
        }

        if (arr_to_sort[1] > arr_to_sort[2]) {
            swap(arr_to_sort, 1, 2);
        }

        if (arr_to_sort[0] > arr_to_sort[1]) {
            swap(arr_to_sort, 0, 1);
        }

        return;
    }

    var skip = length(arr_to_sort) >> 2;
    var idx1 = 0;
    var idx2 = idx1 + skip;
    var idx3 = idx2 + skip;
    var idx4 = idx3 + skip;
    var idx5 = length(arr_to_sort);

    var arr1 = new int[idx2 - idx1]{i -> arr_to_sort[idx1 + i]};
    var arr2 = new int[idx3 - idx2]{i -> arr_to_sort[idx2 + i]};
    var arr3 = new int[idx4 - idx3]{i -> arr_to_sort[idx3 + i]};
    var arr4 = new int[idx5 - idx4]{i -> arr_to_sort[idx4 + i]};
    merge_sort(arr1);
    merge_sort(arr2);
    merge_sort(arr3);
    merge_sort(arr4);

    four_way_merge(arr1, arr2, arr3, arr4, arr_to_sort);
    return;
}

int program(int argc, string[] argv) {
    var sorted = true;
    var arr_to_sort = new int[length(arr)]{i -> arr[i]};
    for (var i = 0; i < 1000000; i = i + 1;) {
        merge_sort(arr_to_sort);
        sorted = sorted & is_sorted(arr_to_sort);
    }
    
    if (sorted) {
        return 0;
    } else {
        return 1;
    }
}